head	1.24;
access;
symbols;
locks
	adrian:1.24; strict;
comment	@# @;


1.24
date	2020.03.13.01.05.20;	author adrian;	state Exp;
branches;
next	1.23;

1.23
date	2017.02.07.07.47.20;	author adrian;	state Exp;
branches;
next	1.22;

1.22
date	2015.10.21.09.06.57;	author adrian;	state Exp;
branches;
next	1.21;

1.21
date	2015.04.15.11.04.49;	author adrian;	state Exp;
branches;
next	1.20;

1.20
date	2015.04.15.08.07.54;	author adrian;	state Exp;
branches;
next	1.19;

1.19
date	2015.02.24.01.41.14;	author adrian;	state Exp;
branches;
next	1.18;

1.18
date	2014.08.27.09.46.17;	author adrian;	state Exp;
branches;
next	1.17;

1.17
date	2014.07.23.03.57.41;	author adrian;	state Exp;
branches;
next	1.16;

1.16
date	2014.07.23.03.55.55;	author adrian;	state Exp;
branches;
next	1.15;

1.15
date	2014.07.23.02.47.08;	author adrian;	state Exp;
branches;
next	1.14;

1.14
date	2014.03.22.07.03.23;	author adrian;	state Exp;
branches;
next	1.13;

1.13
date	2013.04.25.06.37.43;	author adrian;	state Exp;
branches;
next	1.12;

1.12
date	2013.02.11.08.58.30;	author adrian;	state Exp;
branches;
next	1.11;

1.11
date	2013.02.11.04.21.58;	author adrian;	state Exp;
branches;
next	1.10;

1.10
date	2013.02.11.03.31.03;	author adrian;	state Exp;
branches;
next	1.9;

1.9
date	2013.02.11.03.16.35;	author adrian;	state Exp;
branches;
next	1.8;

1.8
date	2010.03.08.08.23.04;	author adrian;	state Exp;
branches;
next	1.7;

1.7
date	2009.06.30.22.08.37;	author adrian;	state Exp;
branches;
next	1.6;

1.6
date	2009.06.30.21.50.38;	author adrian;	state Exp;
branches;
next	1.5;

1.5
date	2009.06.27.20.04.06;	author adrian;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.22.00.01.27;	author adrian;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.21.21.41.11;	author adrian;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.21.21.28.09;	author adrian;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.21.21.26.05;	author adrian;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Summary: use on.exit
@
text
@#
# interactive plot for ppp objects using rpanel
#
#   $Revision: 1.23 $   $Date: 2017/02/07 07:47:20 $
#
#

# Effect:
# when the user types
#                 iplot(x)
# a pop-up panel displays a standard plot of x and
# buttons allowing control of the plot parameters.

# Coding:
# The panel 'p' contains the following internal variables
#      x          Original point pattern
#      w          Window of point pattern
#      xname      Name of x (for main title)
#      mtype      Type of marks of x
#      bb         frame of x 
#      bbmid      midpoint of frame
# The following variables in 'p' are controlled by panel buttons etc
#      split      Logical: whether to split multitype pattern
#      pointmap   Plot character, or "marks" indicating that marks are used
#      zoomfactor Zoom factor 
#      zoomcentre Centre point for zoom
#      charsize   Character expansion factor cex
#      markscale  Mark scale factor markscale
#      

iplot <- function(x, ...) {
  UseMethod("iplot")
}

iplot.ppp <- local({

iplot.ppp <- function(x, ..., xname) {
  if(missing(xname))
    xname <- short.deparse(substitute(x))
  verifyclass(x, "ppp")
  
  if(markformat(x) %in% c("hyperframe", "list"))
    marks(x) <- as.data.frame(as.hyperframe(marks(x)))
  if(markformat(x) == "dataframe" && ncol(marks(x)) > 1) {
    warning("Using only the first column of marks")
    marks(x) <- marks(x)[,1L]
  }
  mtype <- if(is.multitype(x)) "multitype" else if(is.marked(x)) "marked" else "unmarked"

  bb <- as.rectangle(as.owin(x))
  bbmid <- unlist(centroid.owin(bb))
  ##
  kraever("rpanel")
  ##
  p <- rpanel::rp.control(paste("iplot(", xname, ")", sep=""), 
                          x=x,
                          w=as.owin(x),
                          xname=xname,
                          mtype=mtype,
                          bb=bb,
                          bbmid=bbmid,
                          split=FALSE,
                          pointmap=if(is.marked(x)) "marks" else "o",
                          zoomfactor=1,
                          zoomcentre=bbmid,
                          size=c(700, 400))

# Split panel into three
# Left: plot controls
# Middle: data
# Right: navigation/zoom
  rpanel::rp.grid(p, "gcontrols", pos=list(row=0,column=0))
  rpanel::rp.grid(p, "gdisplay",  pos=list(row=0,column=1))
  rpanel::rp.grid(p, "gnavigate", pos=list(row=0,column=2))

#----- Data display ------------

  # This line is to placate the package checker
  mytkr <- NULL

  # Create data display panel 
  rpanel::rp.tkrplot(p, mytkr, plotfun=do.iplot.ppp, action=click.iplot.ppp,
                     pos=list(row=0,column=0,grid="gdisplay"))

  
#----- Plot controls ------------
  nextrow <- 0
  pozzie <- function(n=nextrow, ...)
    append(list(row=n,column=0,grid="gcontrols"), list(...))
  
# main title
  rpanel::rp.textentry(p, xname, action=redraw.iplot.ppp, title="Plot title",
                       pos=pozzie(0))
  nextrow <- 1

# split ?
  if(mtype == "multitype") {
    rpanel::rp.checkbox(p, split, initval=FALSE, 
                        title="Split according to marks",
                        action=redraw.iplot.ppp,
                        pos=pozzie(1))
    nextrow <- 2
  }

# plot character or mark style
  ptvalues <- c("o", "bullet", "plus")
  ptlabels <- c("open circles", "filled circles", "crosshairs")
  if(is.marked(x)) {
    ptvalues <- c("marks", ptvalues)
    ptlabels <- if(mtype == "multitype")
      c("Symbols depending on mark", ptlabels)
    else c("Circles proportional to mark", ptlabels)
  }
  pointmap <- ptvalues[1L]
  rpanel::rp.radiogroup(p, pointmap, vals=ptvalues, labels=ptlabels,
                        title="how to plot points", action=redraw.iplot.ppp,
                        pos=pozzie(nextrow))
  nextrow <- nextrow+1

# plot character size
  charsize <- 1
  rpanel::rp.slider(p, charsize, 0, 5, action=redraw.iplot.ppp, 
                    title="symbol expansion factor (cex)",
                    initval=1, showvalue=TRUE,
                    pos=pozzie(nextrow, sticky=""))
  nextrow <- nextrow+1
  
# mark scale
  if(mtype == "marked") {
    marx <- x$marks
    marx <- marx[is.finite(marx)]
    scal <- mark.scale.default(marx, x$window)
    markscale <- scal
    rpanel::rp.slider(p, markscale,
                      from=scal/10, to = 10*scal,
                      action=redraw.iplot.ppp,
                      initval=scal,
                      title="mark scale factor (markscale)",
                      showvalue=TRUE,
                      pos=pozzie(nextrow))
    nextrow <- nextrow+1
  }

# button to print a summary at console
  rpanel::rp.button(p, title="Print summary information",
                    pos=pozzie(nextrow),
                    action=function(panel) { print(summary(panel$x)); panel} )
#  
#----- Navigation controls ------------
  nextrow <- 0
  navpos <- function(n=nextrow,cc=0, ...)
    append(list(row=n,column=cc,grid="gnavigate"), list(...))

  rpanel::rp.button(p, title="Up", pos=navpos(nextrow,1,sticky=""),
                    action=function(panel) {
                        zo <- panel$zoomfactor
                        ce <- panel$zoomcentre
                        bb <- panel$bb
                        height <- sidelengths(bb)[2L]
                        stepsize <- (height/4)/zo
                        panel$zoomcentre <- ce + c(0, stepsize)
                        CommitAndRedraw(panel)
                        return(panel)
                    })
  nextrow <- nextrow + 1
  rpanel::rp.button(p, title="Left", pos=navpos(nextrow,0,sticky="w"),
                    action=function(panel) {
                        zo <- panel$zoomfactor
                        ce <- panel$zoomcentre
                        bb <- panel$bb
                        width <- sidelengths(bb)[1L]
                        stepsize <- (width/4)/zo
                        panel$zoomcentre <- ce - c(stepsize, 0)
                        CommitAndRedraw(panel)
                        return(panel)
                    })
  rpanel::rp.button(p, title="Right", pos=navpos(nextrow,2,sticky="e"),
                    action=function(panel) {
                        zo <- panel$zoomfactor
                        ce <- panel$zoomcentre
                        bb <- panel$bb
                        width <- sidelengths(bb)[1L]
                        stepsize <- (width/4)/zo
                        panel$zoomcentre <- ce + c(stepsize, 0)
                        CommitAndRedraw(panel)
                        return(panel)
                    })
  nextrow <- nextrow + 1
  rpanel::rp.button(p, title="Down", pos=navpos(nextrow,1,sticky=""),
                    action=function(panel) {
                        zo <- panel$zoomfactor
                        ce <- panel$zoomcentre
                        bb <- panel$bb
                        height <- sidelengths(bb)[2L]
                        stepsize <- (height/4)/zo
                        panel$zoomcentre <- ce - c(0, stepsize)
                        CommitAndRedraw(panel)
                        return(panel)
            })
  nextrow <- nextrow + 1

  rpanel::rp.button(p, title="Zoom In", pos=navpos(nextrow,1,sticky=""),
                    action=function(panel) {
                        panel$zoomfactor <- panel$zoomfactor * 2
                        CommitAndRedraw(panel)
                        return(panel)
                    })
  nextrow <- nextrow + 1
  rpanel::rp.button(p, title="Zoom Out", pos=navpos(nextrow,1,sticky=""),
                    action=function(panel) {
                        panel$zoomfactor <- panel$zoomfactor / 2
                        CommitAndRedraw(panel)
                        return(panel)
                    })
  nextrow <- nextrow + 1
  rpanel::rp.button(p, title="Reset", pos=navpos(nextrow,1,sticky=""),
                    action=function(panel) {
                        panel$zoomfactor <- 1
                        panel$zoomcentre <- panel$bbmid
                        CommitAndRedraw(panel)
                        return(panel)
                    })
  nextrow <- nextrow + 1
  rpanel::rp.button(p, title="Redraw", pos=navpos(nextrow,1,sticky=""),
                    action=redraw.iplot.ppp)
  nextrow <- nextrow+1
# quit button 
  rpanel::rp.button(p, title="Quit", quitbutton=TRUE,
                    pos=navpos(nextrow, 1, sticky=""),
                    action= function(panel) { panel })

  invisible(NULL)
}


  # Function to redraw the whole shebang
  redraw.iplot.ppp <- function(panel) {
    rpanel::rp.tkrreplot(panel, mytkr)
    panel
  }


# Function executed when data display is clicked

  click.iplot.ppp <- function(panel, x, y) {
    if(panel$split) {
      cat("Mouse interaction is not supported when the point pattern is split\n")
    } else {
      panel$zoomcentre <- panel$zoomcentre +
        (c(x,y) - panel$bbmid)/panel$zoomfactor
      CommitAndRedraw(panel)
    }
    return(panel)
  }

# function that updates the plot when the control panel is operated

do.iplot.ppp <- function(panel) { 
  use.marks <- TRUE
  pch <- 16
  switch(panel$pointmap,
         marks={
           use.marks <- TRUE
           pch <- NULL
         }, 
         o = {
           use.marks <- FALSE
           pch <- 1
         }, 
         bullet = {
           use.marks <- FALSE
           pch <- 16
         },
         plus = {
           use.marks <- FALSE
           pch <- 3
         })
  # scale and clip the pattern
  x <- panel$x
  w     <- panel$w
  z     <- panel$zoomfactor
  if(is.null(z)) z <- 1
  ce    <- panel$zoomcentre
  bb    <- panel$bb
  bbmid <- panel$bbmid
  scalex <- shift(scalardilate(shift(x, -ce), z), bbmid)
  scalew <- shift(scalardilate(shift(w, -ce), z), bbmid)
  scalex <- scalex[, bb]
  scalew <- intersect.owin(scalew, bb, fatal=FALSE)
  # determine what is plotted under the clipped pattern
  blankargs <- list(type="n")
  dashargs  <- list(lty=3, border="red")
  panel.begin <- 
    if(is.null(scalew)) {
      # empty intersection; just create the plot space
      layered(bb,          plotargs=list(blankargs))
    } else if(identical(bb, scalew)) {
      if(z == 1) {
        # original state
        # window is rectangular 
        # plot the data window as a solid black rectangle
        layered(bb, scalew,  plotargs=list(blankargs, list(lwd=2)))
      } else {
        # zoom view is entirely inside window
        # plot the clipping region as a red dashed rectangle
        layered(bb, plotargs=list(dashargs))
      }
    } else {
      # field of view is not a subset of window
      # plot the clipping region as a red dashed rectangle
      # Then add the data window
      layered(bb, scalew, plotargs=list(dashargs, list(invert=TRUE)))
    }

  ## draw it
  opa <- par(ask=FALSE)
  on.exit(par(opa))
  if(panel$mtype == "multitype" && panel$split) {
    scalex <- split(scalex, un=(panel$pointmap != "marks"))
    plot(scalex, main=panel$xname, 
         use.marks=use.marks, pch=pch, cex=panel$charsize,
         panel.begin=panel.begin)
  } else {
    # draw scaled & clipped window
    plot(panel.begin, main=panel$xname)
    # add points
    if(panel$mtype == "marked" && panel$pointmap == "marks") {
      plot(scalex, add=TRUE, use.marks=use.marks, markscale=panel$markscale)
    } else {
      plot(scalex, add=TRUE, use.marks=use.marks, pch=pch, cex=panel$charsize)
    }
  }
  panel
}

CommitAndRedraw <- function(panel) {
  # hack to ensure that panel is immediately updated in rpanel
  kraever("rpanel")
  ## This is really a triple-colon!
  rpanel:::rp.control.put(panel$panelname, panel)
  # now redraw it
  redraw.iplot.ppp(panel)
}

iplot.ppp
})

@


1.23
log
@replaced 1 by 1L, etc
@
text
@d4 1
a4 1
#   $Revision: 1.22 $   $Date: 2015/10/21 09:06:57 $
d315 3
a317 2
  # draw it
#  opa <- par(ask=FALSE)
a332 1
#  par(opa)
@


1.22
log
@Major edit replacing dynamic function definitions with static definitions
@
text
@d4 1
a4 1
#   $Revision: 1.21 $   $Date: 2015/04/15 11:04:49 $
d46 1
a46 1
    marks(x) <- marks(x)[,1]
d114 1
a114 1
  pointmap <- ptvalues[1]
d159 1
a159 1
                        height <- sidelengths(bb)[2]
d171 1
a171 1
                        width <- sidelengths(bb)[1]
d182 1
a182 1
                        width <- sidelengths(bb)[1]
d194 1
a194 1
                        height <- sidelengths(bb)[2]
@


1.21
log
@reinstated 'require(rpanel)'
@
text
@d4 1
a4 1
#   $Revision: 1.20 $   $Date: 2015/04/15 08:07:54 $
d53 2
a54 1
  require(rpanel)
d338 1
a338 1
  requireNamespace("rpanel", quietly=TRUE)
d347 1
@


1.20
log
@another try
@
text
@d4 1
a4 1
#   $Revision: 1.19 $   $Date: 2015/02/24 01:41:14 $
a40 2
  requireNamespace("rpanel")
  requireNamespace("tkrplot")
d53 1
@


1.19
log
@avoid 'require'
@
text
@d4 1
a4 1
#   $Revision: 1.18 $   $Date: 2014/08/27 09:46:17 $
d41 2
a42 1
  requireNamespace(rpanel)
d44 1
a44 1
  if(markformat(x) %in% c("hyperframe", "listof")) 
d338 1
a338 1
  requireNamespace(rpanel, quietly=TRUE)
@


1.18
log
@prefaced calls by rpanel::
@
text
@d4 1
a4 1
#   $Revision: 1.17 $   $Date: 2014/07/23 03:57:41 $
d41 1
a41 1
  require(rpanel)
d337 1
a337 1
  require(rpanel)
@


1.17
log
@neatened
@
text
@d4 1
a4 1
#   $Revision: 1.16 $   $Date: 2014/07/23 03:55:55 $
d54 12
a65 12
  p <- rp.control(paste("iplot(", xname, ")", sep=""), 
                  x=x,
                  w=as.owin(x),
                  xname=xname,
                  mtype=mtype,
                  bb=bb,
                  bbmid=bbmid,
                  split=FALSE,
                  pointmap=if(is.marked(x)) "marks" else "o",
                  zoomfactor=1,
                  zoomcentre=bbmid,
                  size=c(700, 400))
d71 3
a73 3
  rp.grid(p, "gcontrols", pos=list(row=0,column=0))
  rp.grid(p, "gdisplay",  pos=list(row=0,column=1))
  rp.grid(p, "gnavigate", pos=list(row=0,column=2))
d81 2
a82 2
  rp.tkrplot(p, mytkr, plotfun=do.iplot.ppp, action=click.iplot.ppp,
             pos=list(row=0,column=0,grid="gdisplay"))
d91 2
a92 2
  rp.textentry(p, xname, action=redraw.iplot.ppp, title="Plot title",
               pos=pozzie(0))
d97 4
a100 3
    rp.checkbox(p, split, initval=FALSE, 
                title="Split according to marks", action=redraw.iplot.ppp,
                pos=pozzie(1))
d114 3
a116 3
  rp.radiogroup(p, pointmap, vals=ptvalues, labels=ptlabels,
   			  title="how to plot points", action=redraw.iplot.ppp,
                pos=pozzie(nextrow))
d121 4
a124 3
  rp.slider(p, charsize, 0, 5, action=redraw.iplot.ppp, 
            title="symbol expansion factor (cex)", initval=1, showvalue=TRUE,
            pos=pozzie(nextrow, sticky=""))
d133 7
a139 4
    rp.slider(p, markscale, from=scal/10, to = 10*scal, action=redraw.iplot.ppp,
              initval=scal,
              title="mark scale factor (markscale)", showvalue=TRUE,
              pos=pozzie(nextrow))
d144 3
a146 3
  rp.button(p, title="Print summary information",
            pos=pozzie(nextrow),
            action=function(panel) { print(summary(panel$x)); panel} )
d153 11
a163 11
  rp.button(p, title="Up", pos=navpos(nextrow,1,sticky=""),
            action=function(panel) {
              zo <- panel$zoomfactor
              ce <- panel$zoomcentre
              bb <- panel$bb
              height <- sidelengths(bb)[2]
              stepsize <- (height/4)/zo
              panel$zoomcentre <- ce + c(0, stepsize)
              CommitAndRedraw(panel)
              return(panel)
            })
d165 22
a186 22
  rp.button(p, title="Left", pos=navpos(nextrow,0,sticky="w"),
            action=function(panel) {
              zo <- panel$zoomfactor
              ce <- panel$zoomcentre
              bb <- panel$bb
              width <- sidelengths(bb)[1]
              stepsize <- (width/4)/zo
              panel$zoomcentre <- ce - c(stepsize, 0)
              CommitAndRedraw(panel)
              return(panel)
            })
  rp.button(p, title="Right", pos=navpos(nextrow,2,sticky="e"),
            action=function(panel) {
              zo <- panel$zoomfactor
              ce <- panel$zoomcentre
              bb <- panel$bb
              width <- sidelengths(bb)[1]
              stepsize <- (width/4)/zo
              panel$zoomcentre <- ce + c(stepsize, 0)
              CommitAndRedraw(panel)
              return(panel)
            })
d188 10
a197 10
  rp.button(p, title="Down", pos=navpos(nextrow,1,sticky=""),
            action=function(panel) {
              zo <- panel$zoomfactor
              ce <- panel$zoomcentre
              bb <- panel$bb
              height <- sidelengths(bb)[2]
              stepsize <- (height/4)/zo
              panel$zoomcentre <- ce - c(0, stepsize)
              CommitAndRedraw(panel)
              return(panel)
d201 6
a206 6
  rp.button(p, title="Zoom In", pos=navpos(nextrow,1,sticky=""),
            action=function(panel) {
              panel$zoomfactor <- panel$zoomfactor * 2
              CommitAndRedraw(panel)
              return(panel)
            })
d208 6
a213 6
  rp.button(p, title="Zoom Out", pos=navpos(nextrow,1,sticky=""),
            action=function(panel) {
              panel$zoomfactor <- panel$zoomfactor / 2
              CommitAndRedraw(panel)
              return(panel)
            })
d215 7
a221 7
  rp.button(p, title="Reset", pos=navpos(nextrow,1,sticky=""),
            action=function(panel) {
              panel$zoomfactor <- 1
              panel$zoomcentre <- panel$bbmid
              CommitAndRedraw(panel)
              return(panel)
            })
d223 2
a224 2
  rp.button(p, title="Redraw", pos=navpos(nextrow,1,sticky=""),
            action=redraw.iplot.ppp)
d227 3
a229 3
  rp.button(p, title="Quit", quitbutton=TRUE,
            pos=navpos(nextrow, 1, sticky=""),
            action= function(panel) { panel })
d237 1
a237 1
    rp.tkrreplot(panel, mytkr)
d285 2
a286 2
  scalex <- shift(affine(shift(x, -ce), diag(c(z,z))), bbmid)
  scalew <- shift(affine(shift(w, -ce), diag(c(z,z))), bbmid)
d337 2
@


1.16
log
@neatened
@
text
@d4 1
a4 1
#   $Revision: 1.15 $   $Date: 2014/07/23 02:47:08 $
d156 1
a156 1
              update.and.redraw(panel)
d168 1
a168 1
              update.and.redraw(panel)
d179 1
a179 1
              update.and.redraw(panel)
d191 1
a191 1
              update.and.redraw(panel)
d199 1
a199 1
              update.and.redraw(panel)
d206 1
a206 1
              update.and.redraw(panel)
d214 1
a214 1
              update.and.redraw(panel)
d245 1
a245 1
      update.and.redraw(panel)
d330 1
a330 1
update.and.redraw <- function(panel) {
@


1.15
log
@bug fix in triggering update after button pressed
@
text
@d4 1
a4 1
#   $Revision: 1.14 $   $Date: 2014/03/22 07:03:23 $
d156 1
a156 2
              immediateupdate(panel)
              redraw.iplot.ppp(panel)
d168 1
a168 2
              immediateupdate(panel)
              redraw.iplot.ppp(panel)
d179 1
a179 2
              immediateupdate(panel)
              redraw.iplot.ppp(panel)
d191 1
a191 2
              immediateupdate(panel)
              redraw.iplot.ppp(panel)
d199 1
a199 2
              immediateupdate(panel)
              redraw.iplot.ppp(panel)
d206 1
a206 2
              immediateupdate(panel)
              redraw.iplot.ppp(panel)
d214 1
a214 2
              immediateupdate(panel)
              redraw.iplot.ppp(panel)
d245 1
a245 2
      immediateupdate(panel)
      redraw.iplot.ppp(panel)
d330 2
a331 3
# hack to ensure that panel is immediately updated in rpanel

immediateupdate <- function(panel) {
d333 2
@


1.14
log
@bug fix in interface to rp.radiogroup
@
text
@d4 1
a4 1
#   $Revision: 1.13 $   $Date: 2013/04/25 06:37:43 $
d156 1
d169 1
d181 1
d194 1
d203 1
d211 1
d220 1
d252 1
d318 1
a318 2
  
  opa <- par(ask=FALSE)
d334 1
a334 1
  par(opa)
d336 6
@


1.13
log
@Replaced rep() by rep.int()
@
text
@d4 1
a4 1
#   $Revision: 1.12 $   $Date: 2013/02/11 08:58:30 $
d113 1
a113 1
  rp.radiogroup(p, pointmap, values=ptvalues, labels=ptlabels,
@


1.12
log
@bug fix
@
text
@d4 1
a4 1
#   $Revision: 1.11 $   $Date: 2013/02/11 04:21:58 $
a41 1
  opa <- par(ask=FALSE)
a225 1
  par(opa)
@


1.11
log
@iplot is now generic
@
text
@d4 1
a4 1
#   $Revision: 1.10 $   $Date: 2013/02/11 03:31:03 $
d42 2
a43 1

d227 1
d310 2
d313 1
a313 1
  # draw it
d329 1
@


1.10
log
@improved
@
text
@d4 1
a4 1
#   $Revision: 1.9 $   $Date: 2013/02/11 03:16:35 $
d31 5
d37 1
a37 1
iplot <- function(x, xname) {
a40 2
  if(markformat(x) == "dataframe")
	marks(x) <- marks(x)[,1]
d42 7
a76 13
# Function executed when data display is clicked

  click.iplot <- function(panel, x, y) {
    if(panel$split) {
      cat("Mouse interaction is not supported when the point pattern is split\n")
    } else {
      panel$zoomcentre <- panel$zoomcentre +
        (c(x,y) - panel$bbmid)/panel$zoomfactor
      redraw(panel)
    }
    return(panel)
  }

d81 1
a81 1
  rp.tkrplot(p, mytkr, plotfun=do.iplot, action=click.iplot,
a83 7
  # Function to redraw the whole shebang
  redraw <- function(panel) {
    rp.tkrreplot(panel, mytkr)
    panel
  }


d91 1
a91 1
  rp.textentry(p, xname, action=redraw, title="Plot title",
d98 1
a98 1
                title="Split according to marks", action=redraw,
d114 1
a114 1
   			  title="how to plot points", action=redraw,
d120 1
a120 1
  rp.slider(p, charsize, 0, 5, action=redraw, 
d131 1
a131 1
    rp.slider(p, markscale, from=scal/10, to = 10*scal, action=redraw,
d156 1
a156 1
              redraw(panel)
d168 1
a168 1
              redraw(panel)
d179 1
a179 1
              redraw(panel)
d191 1
a191 1
              redraw(panel)
d199 1
a199 1
              redraw(panel)
d206 1
a206 1
              redraw(panel)
d214 1
a214 1
              redraw(panel)
d219 1
a219 1
            action=redraw)
d230 20
d252 1
a252 1
do.iplot <- function(panel) { 
d328 2
a329 2
  

@


1.9
log
@safety
@
text
@d4 1
a4 1
#   $Revision: 1.8 $   $Date: 2010/03/08 08:23:04 $
d97 3
a99 1
  pozzie <- function(n=nextrow) list(row=n,column=0,grid="gcontrols")
d132 1
a132 1
            pos=pozzie(nextrow))
a151 4
  nextrow <- nextrow+1
# quit button 
  rp.button(p, title="Quit", quitbutton=TRUE, pos=pozzie(nextrow),
            action= function(panel) { panel })
d155 2
a156 1
  navpos <- function(n=nextrow,cc=0) list(row=n,column=cc,grid="gnavigate")
d158 1
a158 1
  rp.button(p, title="Up", pos=navpos(nextrow,1),
d170 1
a170 1
  rp.button(p, title="Left", pos=navpos(nextrow,0),
d181 1
a181 1
  rp.button(p, title="Right", pos=navpos(nextrow,2),
d193 1
a193 1
  rp.button(p, title="Down", pos=navpos(nextrow,1),
d206 1
a206 1
  rp.button(p, title="Zoom In", pos=navpos(nextrow,1),
d213 1
a213 1
  rp.button(p, title="Zoom Out", pos=navpos(nextrow,1),
d220 1
a220 1
  rp.button(p, title="Reset", pos=navpos(nextrow,1),
d228 1
a228 1
  rp.button(p, title="Redraw", pos=navpos(nextrow,1),
d230 5
d275 1
a275 1
  blankargs <- list(type="n", main=panel$xname)
d302 1
a302 1
    plot(scalex, main=panel$xname,
@


1.8
log
@Now allowing data frames of marks
@
text
@d4 1
a4 1
#   $Revision: 1.7 $   $Date: 2009/06/30 22:08:37 $
d17 1
d20 2
d25 2
d29 1
d34 1
a34 1
    xname <- deparse(substitute(x))
d41 2
d45 7
a51 1
                  x=x, xname=xname, mtype=mtype,
d53 26
a78 10
                  split=FALSE,
                  size=c(600, 400))

# Split panel into two halves  
# Left half of panel: display
# Right half of panel: controls
  rp.grid(p, "gdisplay", pos=list(row=0,column=0))
  rp.grid(p, "gcontrols", pos=list(row=0,column=1))

#----- Display side ------------
a81 2
  
  rp.tkrplot(p, mytkr, do.iplot, pos=list(row=0,column=0,grid="gdisplay"))
d83 5
d89 1
a89 1
    rp.tkrreplot(p, mytkr)
d92 2
d95 1
a95 1
#----- Control side ------------
d155 77
d235 1
d258 53
a310 8
  y <- panel$x
  if(panel$mtype == "multitype" && panel$split)
    y <- split(y, un=(panel$pointmap != "marks"))
  if(panel$mtype == "marked" && panel$pointmap == "marks") 
    plot(y, main=panel$xname, use.marks=use.marks, markscale=panel$markscale)
  else
    plot(y, main=panel$xname, use.marks=use.marks, 
         pch=pch, cex=panel$charsize)      
d313 2
@


1.7
log
@tweak to placate the package checker
@
text
@d4 1
a4 1
#   $Revision: 1.6 $   $Date: 2009/06/30 21:50:38 $
d30 2
@


1.6
log
@now uses tkrplot
@
text
@d4 1
a4 1
#   $Revision: 1.5 $   $Date: 2009/06/27 20:04:06 $
d47 4
@


1.5
log
@new argument xname
@
text
@d4 1
a4 1
#   $Revision: 1.4 $   $Date: 2009/06/22 00:01:27 $
d11 2
a12 2
# the point pattern is displayed on a graphics device as usual;
# a separate control panel pops up, allowing control of the plot parameters.
a18 1
#      d          Device (number) on which point pattern is plotted
a30 2
  out <- plot(x, main=xname)
  d <- dev.cur()
a32 2
  ## these declarations are needed to satisfy the package checker
  pointmap <- charsize <- markscale <- NULL
d35 22
a56 2
                      x=x, xname=xname, d=d, mtype=mtype, size=c(600, 400))
    
d58 3
a60 1
  rp.textentry(p, xname, action=do.iplot, title="Plot title")
d63 1
a63 1
  if(mtype == "multitype")
d65 4
a68 1
                title="Split according to marks", action=do.iplot)
d79 1
d81 3
a83 1
   			  title="how to plot points", action=do.iplot)
d86 6
a91 2
  rp.slider(p, charsize, 0, 5, action=do.iplot, 
            title="symbol expansion factor (cex)", initval=1, showvalue=TRUE)
d94 5
a98 2
    scal <- max(out)/max(as.numeric(names(out)))
    rp.slider(p, markscale, from=scal/10, to = 10*scal, action=do.iplot,
d100 3
a102 1
              title="mark scale factor (markscale)", showvalue=TRUE)
d107 1
d109 1
d111 2
a112 2
  rp.button(p, title="Quit", quitbutton=TRUE,
            action= function(panel) { dev.off(panel$d) ; panel })
a119 2
  dold <- dev.cur()
  dev.set(panel$d)
a146 1
  dev.set(dold)
@


1.4
log
@bug fix
@
text
@d4 1
a4 1
#   $Revision: 1.3 $   $Date: 2009/06/21 21:41:11 $
d27 3
a29 2
iplot <- function(x) {
  xname <- deparse(substitute(x))
@


1.3
log
@inserted 'require(rpanel)'
@
text
@d4 1
a4 1
#   $Revision: 1.2 $   $Date: 2009/06/21 21:28:09 $
d35 3
@


1.2
log
@minor
@
text
@d4 1
a4 1
#   $Revision: 1.1 $   $Date: 2009/06/21 21:26:05 $
d30 1
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
#   $Revision: 1.4 $   $Date: 2009/01/01 00:24:33 $
d74 2
@
