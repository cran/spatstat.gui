head	1.14;
access;
symbols;
locks
	adrian:1.14; strict;
comment	@# @;


1.14
date	2020.03.13.01.05.27;	author adrian;	state Exp;
branches;
next	1.13;

1.13
date	2017.02.07.07.47.20;	author adrian;	state Exp;
branches;
next	1.12;

1.12
date	2015.10.21.09.06.57;	author adrian;	state Exp;
branches;
next	1.11;

1.11
date	2015.05.07.01.56.47;	author adrian;	state Exp;
branches;
next	1.10;

1.10
date	2015.04.15.11.04.58;	author adrian;	state Exp;
branches;
next	1.9;

1.9
date	2015.02.24.01.40.29;	author adrian;	state Exp;
branches;
next	1.8;

1.8
date	2015.02.09.07.26.34;	author adrian;	state Exp;
branches;
next	1.7;

1.7
date	2014.10.24.00.22.30;	author adrian;	state Exp;
branches;
next	1.6;

1.6
date	2014.07.27.08.19.17;	author adrian;	state Exp;
branches;
next	1.5;

1.5
date	2013.04.25.06.37.43;	author adrian;	state Exp;
branches;
next	1.4;

1.4
date	2013.03.04.12.04.44;	author adrian;	state Exp;
branches;
next	1.3;

1.3
date	2013.02.11.11.13.07;	author adrian;	state Exp;
branches;
next	1.2;

1.2
date	2013.02.11.08.58.25;	author adrian;	state Exp;
branches;
next	1.1;

1.1
date	2013.02.11.04.21.47;	author adrian;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Summary: use on.exit
@
text
@#
# interactive plot 
#
#   $Revision: 1.13 $   $Date: 2017/02/07 07:47:20 $
#
#

iplot.default <- function(x, ..., xname) {
 if(missing(xname))
    xname <- short.deparse(substitute(x))
 x <- as.layered(x)
 iplot(x, ..., xname=xname)
}

iplot.layered <- local({

  CommitAndRedraw <- function(panel) {
    ## hack to ensure that panel is immediately updated in rpanel
    kraever("rpanel")
    ## This is really a triple-colon!
    rpanel:::rp.control.put(panel$panelname, panel)
    ## now redraw it
    redraw.iplot.layered(panel)
  }
  
  faster.layers <- function(x, visible) {
    if(any(islinnet <- unlist(lapply(x, inherits, what="linnet")))) {
      # convert linnet layers to psp, for efficiency
      x[islinnet] <- lapply(x[islinnet], as.psp)
    }
    repeat{
      islpp <- unlist(lapply(x, inherits, what="lpp"))
      if(!any(islpp))
        break
      # convert an lpp layer to two layers: psp and ppp, for efficiency
      ii <- min(which(islpp))
      pl <- layerplotargs(x)
      n <- length(x)
      xpre <- if(ii == 1) NULL else x[1:ii]
      xpost <- if(ii == n) NULL else x[(ii+1L):n]
      ppre <- if(ii == 1) NULL else pl[1:ii]
      ppost <- if(ii == n) NULL else pl[(ii+1):n]
      a <- as.psp(as.linnet(x[[ii]]))
      b <- as.ppp(x[[ii]])
      x <- layered(LayerList=c(xpre, list(a, b), xpost),
                   plotargs=unname(c(ppre, pl[ii], pl[ii], ppost)))
      visible <- visible[if(ii == 1) c(1, seq_len(n)) else
                         if(ii == n) c(seq_len(n), n) else
                         c(1:(ii-1), ii, ii, (ii+1):n)]
    }
    attr(x, "visible") <- visible
    return(x)
  }
  
iplot.layered <- function(x, ..., xname, visible) {
  if(missing(xname))
    xname <- short.deparse(substitute(x))
  verifyclass(x, "layered")

  if(missing(visible) || is.null(visible)) {
    visible <- rep(TRUE, length(x))
  } else if(length(visible) == 1) {
    visible <- rep(visible, length(x))
  } else stopifnot(length(visible) == length(x))

  kraever("rpanel")

  x <- faster.layers(x, visible)
  visible <- attr(x, "visible")

  x <- freeze.colourmaps(x)
  bb <- as.rectangle(as.owin(x))
  bbmid <- unlist(centroid.owin(bb))


  lnames <- names(x)
  if(sum(nzchar(lnames)) != length(x))
    lnames <- paste("Layer", seq_len(length(x)))
  ##
  p <- rpanel::rp.control(paste("iplot(", xname, ")", sep=""), 
                          x=x,
                          w=as.owin(x),
                          xname=xname,
                          layernames=lnames,
                          bb=bb,
                          bbmid=bbmid,
                          zoomfactor=1,
                          zoomcentre=bbmid,
                          which = visible,
                          size=c(700, 400))

# Split panel into three
# Left: plot controls
# Middle: data
# Right: navigation/zoom
  rpanel::rp.grid(p, "gcontrols", pos=list(row=0,column=0))
  rpanel::rp.grid(p, "gdisplay",  pos=list(row=0,column=1))
  rpanel::rp.grid(p, "gnavigate", pos=list(row=0,column=2))

#----- Data display ------------

  # This line is to placate the package checker
  mytkr <- NULL

  # Create data display panel 
  rpanel::rp.tkrplot(p, mytkr, plotfun=do.iplot.layered,
                     action=click.iplot.layered,
                     pos=list(row=0,column=0,grid="gdisplay"))

  
#----- Plot controls ------------
  nextrow <- 0
  pozzie <- function(n=nextrow, ...)
    append(list(row=n,column=0,grid="gcontrols"), list(...))
  
# main title
  rpanel::rp.textentry(p, xname, action=redraw.iplot.layered,
                       title="Plot title",
                       pos=pozzie(0))
  nextrow <- 1

# select some layers
  nx <- length(x)
  which <- rep.int(TRUE, nx)
  if(nx > 1) {
    rpanel::rp.checkbox(p, which, labels=lnames,
                        action=redraw.iplot.layered,
                        title="Select layers to plot",
                        pos=pozzie(nextrow), sticky="")
    nextrow <- nextrow + 1
  }
  
# button to print a summary at console
  rpanel::rp.button(p, title="Print summary information",
                    pos=pozzie(nextrow),
                    action=function(panel) {
                        lapply(lapply(panel$x, summary), print)
                        return(panel)
                    })
#  
#----- Navigation controls ------------
  nextrow <- 0
  navpos <- function(n=nextrow,cc=0, ...)
    append(list(row=n,column=cc,grid="gnavigate"), list(...))

  rpanel::rp.button(p, title="Up", pos=navpos(nextrow,1,sticky=""),
                    action=function(panel) {
                        zo <- panel$zoomfactor
                        ce <- panel$zoomcentre
                        bb <- panel$bb
                        height <- sidelengths(bb)[2L]
                        stepsize <- (height/4)/zo
                        panel$zoomcentre <- ce + c(0, stepsize)
                        CommitAndRedraw(panel)
                        return(panel)
                    })
  nextrow <- nextrow + 1
  rpanel::rp.button(p, title="Left", pos=navpos(nextrow,0,sticky="w"),
                    action=function(panel) {
                        zo <- panel$zoomfactor
                        ce <- panel$zoomcentre
                        bb <- panel$bb
                        width <- sidelengths(bb)[1L]
                        stepsize <- (width/4)/zo
                        panel$zoomcentre <- ce - c(stepsize, 0)
                        CommitAndRedraw(panel)
                        return(panel)
                    })
  rpanel::rp.button(p, title="Right", pos=navpos(nextrow,2,sticky="e"),
                    action=function(panel) {
                        zo <- panel$zoomfactor
                        ce <- panel$zoomcentre
                        bb <- panel$bb
                        width <- sidelengths(bb)[1L]
                        stepsize <- (width/4)/zo
                        panel$zoomcentre <- ce + c(stepsize, 0)
                        CommitAndRedraw(panel)
                        return(panel)
                    })
  nextrow <- nextrow + 1
  rpanel::rp.button(p, title="Down", pos=navpos(nextrow,1,sticky=""),
                    action=function(panel) {
                        zo <- panel$zoomfactor
                        ce <- panel$zoomcentre
                        bb <- panel$bb
                        height <- sidelengths(bb)[2L]
                        stepsize <- (height/4)/zo
                        panel$zoomcentre <- ce - c(0, stepsize)
                        CommitAndRedraw(panel)
                        return(panel)
                    })
  nextrow <- nextrow + 1

  rpanel::rp.button(p, title="Zoom In", pos=navpos(nextrow,1,sticky=""),
                    action=function(panel) {
                        panel$zoomfactor <- panel$zoomfactor * 2
                        CommitAndRedraw(panel)
                        return(panel)
                    })
  nextrow <- nextrow + 1
  rpanel::rp.button(p, title="Zoom Out", pos=navpos(nextrow,1,sticky=""),
                    action=function(panel) {
                        panel$zoomfactor <- panel$zoomfactor / 2
                        CommitAndRedraw(panel)
                        return(panel)
                    })
  nextrow <- nextrow + 1
  rpanel::rp.button(p, title="Reset", pos=navpos(nextrow,1,sticky=""),
                    action=function(panel) {
                        panel$zoomfactor <- 1
                        panel$zoomcentre <- panel$bbmid
                        CommitAndRedraw(panel)
                        return(panel)
                    })
  nextrow <- nextrow + 1
  rpanel::rp.button(p, title="Redraw", pos=navpos(nextrow,1,sticky=""),
                    action=redraw.iplot.layered)
  nextrow <- nextrow+1
# quit button 
  rpanel::rp.button(p, title="Quit", quitbutton=TRUE,
            pos=navpos(nextrow, 1, sticky=""),
            action= function(panel) { panel })

  invisible(NULL)
}


  # Function to redraw the whole shebang
  redraw.iplot.layered <- function(panel) {
    rpanel::rp.tkrreplot(panel, mytkr)
    panel
  }


# Function executed when data display is clicked

  click.iplot.layered <- function(panel, x, y) {
    panel$zoomcentre <- panel$zoomcentre +
      (c(x,y) - panel$bbmid)/panel$zoomfactor
    CommitAndRedraw(panel)
    return(panel)
  }

# function that updates the plot when the control panel is operated

do.iplot.layered <- function(panel) { 
  # scale and clip the pattern
  x <- panel$x[panel$which]
  w     <- panel$w
  z     <- panel$zoomfactor
  if(is.null(z)) z <- 1
  ce    <- panel$zoomcentre
  bb    <- panel$bb
  bbmid <- panel$bbmid
  scalex <- shift(scalardilate(shift(x, -ce), z), bbmid)
  scalew <- shift(scalardilate(shift(w, -ce), z), bbmid)
  scalex <- scalex[, bb]
  scalew <- intersect.owin(scalew, bb, fatal=FALSE)
  # determine what is plotted under the clipped pattern
  blankargs <- list(type="n")
  dashargs  <- list(lty=3, border="red")
  panel.begin <- 
    if(is.null(scalew)) {
      # empty intersection; just create the plot space
      layered(bb,          plotargs=list(blankargs))
    } else if(identical(bb, scalew)) {
      if(z == 1) {
        # original state
        # window is rectangular 
        # plot the data window as a solid black rectangle
        layered(bb, scalew,  plotargs=list(blankargs, list(lwd=2)))
      } else {
        # zoom view is entirely inside window
        # plot the clipping region as a red dashed rectangle
        layered(bb, plotargs=list(dashargs))
      }
    } else {
      # field of view is not a subset of window
      # plot the clipping region as a red dashed rectangle
      # Then add the data window
      layered(bb, scalew, plotargs=list(dashargs, list(invert=TRUE)))
    }
  
  # draw it
  opa <- par(ask=FALSE)
  on.exit(par(opa))
  plot(panel.begin, main=panel$xname)
  plot(scalex, add=TRUE)
  panel
}

freeze.colourmaps <- function(x) {
  # tweak a layered object to ensure that
  # the colours of image layers don't change with zoom/pan
  isim <- unlist(lapply(x, is.im))
  if(any(isim)) {
    # ensure there are plotargs
    pl <- attr(x, "plotargs")
    if(is.null(pl))
      pl <- rep.int(list(list()), length(x))
    # make sure the plotargs include 'zlim'
    for(i in which(isim)) {
      x.i <- x[[i]]
      if(x.i$type %in% c("integer", "real")) 
        pl[[i]] <- resolve.defaults(pl[[i]], list(zlim=range(x.i)))
    }
    # put back
    attr(x, "plotargs") <- pl
  }
  return(x) 
}

iplot.layered
})
@


1.13
log
@replaced 1 by 1L, etc
@
text
@d4 1
a4 1
#   $Revision: 1.12 $   $Date: 2015/10/21 09:06:57 $
d286 1
a288 1
  par(opa)
@


1.12
log
@Major edit replacing dynamic function definitions with static definitions
@
text
@d4 1
a4 1
#   $Revision: 1.11 $   $Date: 2015/05/07 01:56:47 $
d40 1
a40 1
      xpost <- if(ii == n) NULL else x[(ii+1):n]
d151 1
a151 1
                        height <- sidelengths(bb)[2]
d163 1
a163 1
                        width <- sidelengths(bb)[1]
d174 1
a174 1
                        width <- sidelengths(bb)[1]
d186 1
a186 1
                        height <- sidelengths(bb)[2]
@


1.11
log
@fixed bug in loading rpanel
@
text
@d4 1
a4 1
#   $Revision: 1.10 $   $Date: 2015/04/15 11:04:58 $
d19 1
a19 1
    summon.rpanel()
d66 1
a66 1
  summon.rpanel()
d137 1
a137 1
                        lapply(panel$x, function(z) print(summary(z)))
@


1.10
log
@reinstated 'require(rpanel)'
@
text
@d4 1
a4 1
#   $Revision: 1.9 $   $Date: 2015/02/24 01:40:29 $
d19 1
a19 1
    requireNamespace("rpanel", quietly=TRUE)
d65 2
a66 3
  
#  requireNamespace("rpanel")
  require(rpanel)
@


1.9
log
@avoid 'require'
@
text
@d4 1
a4 1
#   $Revision: 1.8 $   $Date: 2015/02/09 07:26:34 $
d19 1
a19 1
    requireNamespace(rpanel, quietly=TRUE)
d66 2
a67 1
  requireNamespace(rpanel, quietly=TRUE)
@


1.8
log
@new argument 'visible'
@
text
@d4 1
a4 1
#   $Revision: 1.7 $   $Date: 2014/10/24 00:22:30 $
d19 1
a19 1
    require(rpanel)
d66 1
a66 1
  require(rpanel)
@


1.7
log
@safety
@
text
@d4 1
a4 1
#   $Revision: 1.6 $   $Date: 2014/07/27 08:19:17 $
d26 1
a26 1
  faster.layers <- function(x) {
d47 3
d51 1
d55 1
a55 1
iplot.layered <- function(x, ..., xname) {
d59 7
d68 3
a70 1
  x <- faster.layers(x)
d74 2
a75 1
  
d89 1
a89 1
                          which = rep.int(TRUE, length(x)),
@


1.6
log
@fixed crash when all layers were deselected.
@
text
@d4 1
a4 1
#   $Revision: 1.5 $   $Date: 2013/04/25 06:37:43 $
d11 1
a11 1
 x <- layered(x)
d17 9
d66 11
a76 11
  p <- rp.control(paste("iplot(", xname, ")", sep=""), 
                  x=x,
                  w=as.owin(x),
                  xname=xname,
                  layernames=lnames,
                  bb=bb,
                  bbmid=bbmid,
                  zoomfactor=1,
                  zoomcentre=bbmid,
                  which = rep.int(TRUE, length(x)),
                  size=c(700, 400))
d82 3
a84 3
  rp.grid(p, "gcontrols", pos=list(row=0,column=0))
  rp.grid(p, "gdisplay",  pos=list(row=0,column=1))
  rp.grid(p, "gnavigate", pos=list(row=0,column=2))
d92 3
a94 2
  rp.tkrplot(p, mytkr, plotfun=do.iplot.layered, action=click.iplot.layered,
             pos=list(row=0,column=0,grid="gdisplay"))
d103 3
a105 2
  rp.textentry(p, xname, action=redraw.iplot.layered, title="Plot title",
               pos=pozzie(0))
d112 4
a115 4
    rp.checkbox(p, which, labels=lnames,
                action=redraw.iplot.layered,
                title="Select layers to plot",
                pos=pozzie(nextrow), sticky="")
d120 6
a125 6
  rp.button(p, title="Print summary information",
            pos=pozzie(nextrow),
            action=function(panel) {
              lapply(panel$x, function(z) print(summary(z)))
              return(panel)
            })
d132 69
a200 69
  rp.button(p, title="Up", pos=navpos(nextrow,1,sticky=""),
            action=function(panel) {
              zo <- panel$zoomfactor
              ce <- panel$zoomcentre
              bb <- panel$bb
              height <- sidelengths(bb)[2]
              stepsize <- (height/4)/zo
              panel$zoomcentre <- ce + c(0, stepsize)
              redraw.iplot.layered(panel)
              return(panel)
            })
  nextrow <- nextrow + 1
  rp.button(p, title="Left", pos=navpos(nextrow,0,sticky="w"),
            action=function(panel) {
              zo <- panel$zoomfactor
              ce <- panel$zoomcentre
              bb <- panel$bb
              width <- sidelengths(bb)[1]
              stepsize <- (width/4)/zo
              panel$zoomcentre <- ce - c(stepsize, 0)
              redraw.iplot.layered(panel)
              return(panel)
            })
  rp.button(p, title="Right", pos=navpos(nextrow,2,sticky="e"),
            action=function(panel) {
              zo <- panel$zoomfactor
              ce <- panel$zoomcentre
              bb <- panel$bb
              width <- sidelengths(bb)[1]
              stepsize <- (width/4)/zo
              panel$zoomcentre <- ce + c(stepsize, 0)
              redraw.iplot.layered(panel)
              return(panel)
            })
  nextrow <- nextrow + 1
  rp.button(p, title="Down", pos=navpos(nextrow,1,sticky=""),
            action=function(panel) {
              zo <- panel$zoomfactor
              ce <- panel$zoomcentre
              bb <- panel$bb
              height <- sidelengths(bb)[2]
              stepsize <- (height/4)/zo
              panel$zoomcentre <- ce - c(0, stepsize)
              redraw.iplot.layered(panel)
              return(panel)
            })
  nextrow <- nextrow + 1

  rp.button(p, title="Zoom In", pos=navpos(nextrow,1,sticky=""),
            action=function(panel) {
              panel$zoomfactor <- panel$zoomfactor * 2
              redraw.iplot.layered(panel)
              return(panel)
            })
  nextrow <- nextrow + 1
  rp.button(p, title="Zoom Out", pos=navpos(nextrow,1,sticky=""),
            action=function(panel) {
              panel$zoomfactor <- panel$zoomfactor / 2
              redraw.iplot.layered(panel)
              return(panel)
            })
  nextrow <- nextrow + 1
  rp.button(p, title="Reset", pos=navpos(nextrow,1,sticky=""),
            action=function(panel) {
              panel$zoomfactor <- 1
              panel$zoomcentre <- panel$bbmid
              redraw.iplot.layered(panel)
              return(panel)
            })
d202 2
a203 2
  rp.button(p, title="Redraw", pos=navpos(nextrow,1,sticky=""),
            action=redraw.iplot.layered)
d206 1
a206 1
  rp.button(p, title="Quit", quitbutton=TRUE,
d216 1
a216 1
    rp.tkrreplot(panel, mytkr)
d226 1
a226 1
    redraw.iplot.layered(panel)
@


1.5
log
@Replaced rep() by rep.int()
@
text
@d4 1
a4 1
#   $Revision: 1.4 $   $Date: 2013/03/04 12:04:44 $
d230 2
a231 2
  scalex <- shift(affine(shift(x, -ce), diag(c(z,z))), bbmid)
  scalew <- shift(affine(shift(w, -ce), diag(c(z,z))), bbmid)
@


1.4
log
@converts linnet to psp etc
@
text
@d4 1
a4 1
#   $Revision: 1.3 $   $Date: 2013/02/11 11:13:07 $
d66 1
a66 1
                  which = rep(TRUE, length(x)),
d99 1
a99 1
  which <- rep(TRUE, nx)
d275 1
a275 1
      pl <- rep(list(list()), length(x))
@


1.3
log
@freezes colourmaps
@
text
@d4 1
a4 1
#   $Revision: 1.2 $   $Date: 2013/02/11 08:58:25 $
d17 25
d48 1
@


1.2
log
@bug fix
@
text
@d4 1
a4 1
#   $Revision: 1.1 $   $Date: 2013/02/11 04:21:47 $
a21 1
  opa <- par(ask=FALSE)
d23 1
a172 1
  par(opa)
d239 21
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
#   $Revision: 1.10 $   $Date: 2013/02/11 03:31:03 $
d22 1
d173 1
d235 1
d238 1
@
